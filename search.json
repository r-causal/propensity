[{"path":"https://r-causal.github.io/propensity/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 propensity authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://r-causal.github.io/propensity/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Malcolm Barrett. Author, maintainer.","code":""},{"path":"https://r-causal.github.io/propensity/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barrett M (2025). propensity: Toolkit Calculating Working Propensity Scores. R package version 0.0.0.9000, https://github.com/malcolmbarrett/propensity.","code":"@Manual{,   title = {propensity: A Toolkit for Calculating and Working with Propensity Scores},   author = {Malcolm Barrett},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/malcolmbarrett/propensity}, }"},{"path":"https://r-causal.github.io/propensity/index.html","id":"propensity-","dir":"","previous_headings":"","what":"A Toolkit for Calculating and Working with Propensity Scores","title":"A Toolkit for Calculating and Working with Propensity Scores","text":"goal propensity calculate propensity scores weights wide variety research questions. propensity early development.","code":""},{"path":"https://r-causal.github.io/propensity/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Toolkit for Calculating and Working with Propensity Scores","text":"can install development version propensity GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"r-causal/propensity\")"},{"path":"https://r-causal.github.io/propensity/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A Toolkit for Calculating and Working with Propensity Scores","text":"propensity early development. Currently, supports calculating propensity score weights binary exposures:","code":"library(propensity) propensity_scores <- c(.1, .3, .4, .3) x <- c(0, 0, 1, 0)  # ATE weights wt_ate(propensity_scores, .exposure = x) #> ℹ Treating `.exposure` as binary #> <psw{estimand = ate}[4]> #> [1] 1.111111 1.428571 2.500000 1.428571  # Stabilized ATE weights wt_ate(propensity_scores, .exposure = x, stabilize = TRUE) #> ℹ Treating `.exposure` as binary #> <psw{estimand = ate}[4]> #> [1] 0.2777778 0.3571429 0.6250000 0.3571429  # ATO weights wt_ato(propensity_scores, .exposure = x) #> ℹ Treating `.exposure` as binary #> <psw{estimand = ato}[4]> #> [1] 0.1 0.3 0.6 0.3"},{"path":"https://r-causal.github.io/propensity/reference/ipw.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse Probability Weights for Causal Inference — ipw","title":"Inverse Probability Weights for Causal Inference — ipw","text":"ipw() bring---model (BYOM) inverse probability weighted estimator. ipw() accepts propensity score model weighted outcome model already fit. purpose ipw() capture uncertainty inherent two-step process calculate correct standard errors estimate. Currently, ipw() supports binary exposures either binary continuous outcomes. binary outcomes, ipw() calculates marginal risk difference, log risk ratio, log odds ratio. continuous outcomes, ipw() calculates marginal difference means.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ipw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse Probability Weights for Causal Inference — ipw","text":"","code":"ipw(   ps_mod,   outcome_mod,   .df = NULL,   estimand = NULL,   ps_link = NULL,   conf_level = 0.95 )  # S3 method for class 'ipw' as.data.frame(x, row.names = NULL, optional = NULL, exponentiate = FALSE, ...)"},{"path":"https://r-causal.github.io/propensity/reference/ipw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse Probability Weights for Causal Inference — ipw","text":"ps_mod fitted propensity score model class stats::glm(), typically logistic regression exposure dependent variable. outcome_mod fitted, weighted outcome model class stats::glm() stats::lm(), outcome dependent variable. .df data frame containing exposure, outcome, covariates. NULL, ipw() try extract data ps_mod outcome_mod. estimand character string specifying causal estimand: ate, att, ato, atm. NULL, function attempts infer existing weights outcome_mod, assuming calculated wt_ate(), wt_att(), wt_atm(), wt_ato(). ps_link character string specifying link function propensity score model: logit, probit, cloglog. Defaults whatever link used ps_mod. conf_level Numeric. Confidence level intervals (default 0.95). x ipw object row.names, optional, ... Passed .data.frame(). exponentiate Logical. log-RR log-exponentiated?","code":""},{"path":"https://r-causal.github.io/propensity/reference/ipw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse Probability Weights for Causal Inference — ipw","text":"S3 object class ipw containing: estimand: One \"ate\", \"att\", \"ato\", \"atm\". ps_mod: fitted propensity score model. outcome_mod: fitted outcome model. estimates: data frame point estimates, standard errors, z-statistics, confidence intervals, p-values.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ipw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse Probability Weights for Causal Inference — ipw","text":"function constructs inverse probability weights based chosen estimand, uses weights (extracts outcome_mod) compute effect measures: rd: Risk difference log(rr): Log risk ratio log(): Log odds ratio linear outcome model (using stats::lm() stats::glm() family = gaussian()), difference means (diff) returned. Variance Estimation variance estimated via linearization, provide variance estimates IPW correctly account uncertainty estimation propensity scores. details various types propensity score weights corresponding variance estimators, see: Kostouraki , Hajage D, Rachet B, et al. variance estimation inverse probability--treatment weighting estimator: tutorial different types propensity score weights. Statistics Medicine. 2024; 43(13): 2672-2694. doi: 10.1002/sim.10078","code":""},{"path":[]},{"path":"https://r-causal.github.io/propensity/reference/ipw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse Probability Weights for Causal Inference — ipw","text":"","code":"set.seed(123) n <- 100 # confounder x1 <- rnorm(n) # exposure z  <- rbinom(n, 1, plogis(0.2 * x1)) # binary outcome y  <- rbinom(n, 1, plogis(1 + 2*z + 0.5*x1))  dat <- data.frame(x1, z, y)  # fit a propensity score model (exposure ~ x1) ps_mod <- glm(z ~ x1, data = dat, family = binomial())  # calculate weights for ATE ps <- predict(ps_mod, type = \"response\") wts <- wt_ate(ps, z) #> ℹ Treating `.exposure` as binary #> ℹ Setting treatment to `1`  # fit an outcome model (binary y ~ z) using IPW outcome_mod <- glm(y ~ z, data = dat, family = binomial(), weights = wts) #> Warning: non-integer #successes in a binomial glm!  # run IPW ipw_res <- ipw(ps_mod, outcome_mod)  ipw_res #> Inverse Probability Weight Estimator #> Estimand: ATE  #>  #> Propensity Score Model: #>   Call: glm(formula = z ~ x1, family = binomial(), data = dat)  #>  #> Outcome Model: #>   Call: glm(formula = y ~ z, family = binomial(), data = dat, weights = wts)  #>  #> Estimates: #>         estimate  std.err        z ci.lower ci.upper conf.level   p.value     #> rd       0.16311 0.076670 2.127466   0.0128  0.31338       0.95   0.03338 *   #> log(rr)  0.19720 0.080683 2.444134   0.0391  0.35533       0.95   0.01452 *   #> log(or)  1.24122 0.170217 7.291963   0.9076  1.57484       0.95 3.055e-13 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  # Convert to a data frame with exponentiated RR/OR ipw_res_df <- as.data.frame(ipw_res, exponentiate = TRUE) ipw_res_df #>   effect  estimate    std.err        z   ci.lower  ci.upper conf.level #> 1     rd 0.1631125 0.07666988 2.127466 0.01284233 0.3133827       0.95 #> 2     rr 1.2179865 0.08068260 2.444134 1.03983716 1.4266572       0.95 #> 3     or 3.4598274 0.17021737 7.291963 2.47836430 4.8299620       0.95 #>        p.value #> 1 3.338141e-02 #> 2 1.452002e-02 #> 3 3.055334e-13"},{"path":"https://r-causal.github.io/propensity/reference/is_ps_trimmed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is trimmed — is_ps_trimmed","title":"Check if object is trimmed — is_ps_trimmed","text":"is_ps_trimmed() S3 generic returns TRUE argument represents ps_trim object psw object created trimmed propensity scores. is_ps_trimmed() question whether propensity scores trimmed, opposed is_unit_trimmed(), question units trimmed.","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_ps_trimmed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is trimmed — is_ps_trimmed","text":"","code":"is_ps_trimmed(x)"},{"path":"https://r-causal.github.io/propensity/reference/is_ps_trimmed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is trimmed — is_ps_trimmed","text":"x object.","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_ps_trimmed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is trimmed — is_ps_trimmed","text":"logical scalar (TRUE FALSE).","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_ps_truncated.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is truncated — is_ps_truncated","title":"Check if object is truncated — is_ps_truncated","text":"is_ps_truncated() S3 generic returns TRUE argument represents ps_trunc object psw object created truncated propensity scores. is_ps_truncated() question whether propensity scores truncated, opposed is_unit_truncated(), question units truncated. is_ps_truncated() S3 generic returns TRUE argument represents ps_trunc object psw object flagged truncated.","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_ps_truncated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is truncated — is_ps_truncated","text":"","code":"is_ps_truncated(x)  is_ps_truncated(x)"},{"path":"https://r-causal.github.io/propensity/reference/is_ps_truncated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is truncated — is_ps_truncated","text":"x R object.","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_ps_truncated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is truncated — is_ps_truncated","text":"logical scalar (TRUE FALSE). logical scalar (TRUE FALSE).","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_refit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object has been refit — is_refit","title":"Check if an object has been refit — is_refit","text":"is_refit() S3 generic returns TRUE argument represents ps_trim object (weighting object) propensity model refit retained subset.","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_refit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object has been refit — is_refit","text":"","code":"is_refit(x)"},{"path":"https://r-causal.github.io/propensity/reference/is_refit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object has been refit — is_refit","text":"x R object (e.g. ps_trim psw).","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_refit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object has been refit — is_refit","text":"logical scalar (TRUE FALSE).","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_unit_trimmed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if units have been trimmed — is_unit_trimmed","title":"Check if units have been trimmed — is_unit_trimmed","text":"is_unit_trimmed() vector TRUE FALSE values, representing unit trimmed. is_unit_trimmed() question units trimmed, opposed is_ps_trimmed(), question whether propensity scores trimmed.","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_unit_trimmed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if units have been trimmed — is_unit_trimmed","text":"","code":"is_unit_trimmed(x)"},{"path":"https://r-causal.github.io/propensity/reference/is_unit_trimmed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if units have been trimmed — is_unit_trimmed","text":"x object.","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_unit_trimmed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if units have been trimmed — is_unit_trimmed","text":"logical scalar (TRUE FALSE).","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_unit_truncated.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if units have been truncated — is_unit_truncated","title":"Check if units have been truncated — is_unit_truncated","text":"is_ps_truncated() S3 generic returns vector TRUE FALSE, representing element truncated. is_unit_truncated() question units truncated, opposed is_ps_truncated(), question whether propensity scores truncated.","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_unit_truncated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if units have been truncated — is_unit_truncated","text":"","code":"is_unit_truncated(x)"},{"path":"https://r-causal.github.io/propensity/reference/is_unit_truncated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if units have been truncated — is_unit_truncated","text":"x object.","code":""},{"path":"https://r-causal.github.io/propensity/reference/is_unit_truncated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if units have been truncated — is_unit_truncated","text":"logical vector.","code":""},{"path":"https://r-causal.github.io/propensity/reference/propensity-package.html","id":null,"dir":"Reference","previous_headings":"","what":"propensity: A Toolkit for Calculating and Working with Propensity Scores — propensity-package","title":"propensity: A Toolkit for Calculating and Working with Propensity Scores — propensity-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://r-causal.github.io/propensity/reference/propensity-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"propensity: A Toolkit for Calculating and Working with Propensity Scores — propensity-package","text":"Maintainer: Malcolm Barrett malcolmbarrett@gmail.com (ORCID)","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_calibrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate propensity scores — ps_calibrate","title":"Calibrate propensity scores — ps_calibrate","text":"function calibrates propensity scores improve accuracy using either Platt scaling (logistic regression) isotonic regression. preserves attributes causal weight objects applicable.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_calibrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate propensity scores — ps_calibrate","text":"","code":"ps_calibrate(   ps,   treat,   method = c(\"logistic\", \"isoreg\"),   smooth = TRUE,   .treated = NULL,   .untreated = NULL,   estimand = NULL )"},{"path":"https://r-causal.github.io/propensity/reference/ps_calibrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate propensity scores — ps_calibrate","text":"ps Numeric vector propensity scores 0 1 treat binary vector treatment assignments method Calibration method: \"logistic\" (Default) Logistic calibration (also known Platt scaling). Assumes sigmoid relationship observed true probabilities. Best : propensity scores follow logistic pattern systematically biased. Provides smooth, parametric calibration. Faster stable small samples. \"isoreg\" Isotonic regression calibration. Uses non-parametric monotonic transformation. Best : relationship observed true probabilities non-linear want preserve rank order without assuming specific functional form. flexible requires larger samples stable estimates. smooth Logical. method = \"logistic\", whether use smoothed logistic spline model (smooth = TRUE, default) simple logistic regression (smooth = FALSE). TRUE, uses mgcv::gam() spline smoothing. FALSE, uses stats::glm(). Ignored method = \"isoreg\". .treated value representing treatment group. provided, ps_calibrate() attempt automatically determine treatment coding. .untreated value representing control group. provided, ps_calibrate() attempt automatically determine control coding. estimand Character indicating estimand type.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_calibrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrate propensity scores — ps_calibrate","text":"calibrated propensity score object (psw)","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_calibrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrate propensity scores — ps_calibrate","text":"","code":"# Generate example data ps <- runif(100) treat <- rbinom(100, 1, ps)  # Logistic calibration with smoothing (default) calibrated_smooth <- ps_calibrate(ps, treat) #> ℹ Setting treatment to `1`  # Logistic calibration without smoothing (simple logistic regression) calibrated_simple <- ps_calibrate(ps, treat, smooth = FALSE) #> ℹ Setting treatment to `1`  # Isotonic regression calibrated_iso <- ps_calibrate(ps, treat, method = \"isoreg\") #> ℹ Setting treatment to `1`"},{"path":"https://r-causal.github.io/propensity/reference/ps_refit.html","id":null,"dir":"Reference","previous_headings":"","what":"Refit the Propensity Score Model on Retained Observations — ps_refit","title":"Refit the Propensity Score Model on Retained Observations — ps_refit","text":"Takes ps_trim object original model used calculate propensity score, : Retrieves data model (.df argument provided) Subsets rows non‐trimmed indices Refits model Predicts new propensity scores rows (trimmed rows -> NA) Returns new ps_trim object refit = TRUE.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_refit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refit the Propensity Score Model on Retained Observations — ps_refit","text":"","code":"ps_refit(trimmed_ps, model, .df = NULL, ...)"},{"path":"https://r-causal.github.io/propensity/reference/ps_refit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refit the Propensity Score Model on Retained Observations — ps_refit","text":"trimmed_ps ps_trim object (length data, NAs trimmed). model fitted model used get original PS (e.g. glm). .df Optional. data frame. NULL, try retrieve model. ... Additional arguments passed update().","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_refit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refit the Propensity Score Model on Retained Observations — ps_refit","text":"new ps_trim object updated propensity scores ps_trim_meta(x)$refit set TRUE.","code":""},{"path":[]},{"path":"https://r-causal.github.io/propensity/reference/ps_refit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Refit the Propensity Score Model on Retained Observations — ps_refit","text":"","code":"set.seed(2) n <- 30 x <- rnorm(n) z <- rbinom(n, 1, plogis(0.4 * x)) fit <- glm(z ~ x, family = binomial) ps <- predict(fit, type = \"response\")  # trim and refit refit <- ps_trim(ps, lower = .2, upper = .8) |>   ps_refit(fit)  is_refit(refit) #> [1] TRUE"},{"path":"https://r-causal.github.io/propensity/reference/ps_trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim Propensity Scores — ps_trim","title":"Trim Propensity Scores — ps_trim","text":"ps_trim() applies trimming methods propensity-score vector, returning new vector length, trimmed entries replaced NA. can inspect metadata ps_trim_meta(x). running ps_trim(), refit model ps_refit().","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim Propensity Scores — ps_trim","text":"","code":"ps_trim(   ps,   method = c(\"ps\", \"adaptive\", \"pctl\", \"pref\", \"cr\"),   lower = NULL,   upper = NULL,   .exposure = NULL,   .treated = NULL,   .untreated = NULL )"},{"path":"https://r-causal.github.io/propensity/reference/ps_trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim Propensity Scores — ps_trim","text":"ps propensity score, numeric vector 0 1. method One c(\"ps\", \"adaptive\", \"pctl\", \"pref\", \"cr\"). lower, upper Numeric cutoffs quantiles. NULL, defaults vary method. .exposure methods like \"pref\" \"cr\", vector binary exposure. .treated value representing treatment group. provided, automatically detected. .untreated value representing control group. provided, automatically detected.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_trim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim Propensity Scores — ps_trim","text":"ps_trim object (numeric vector). attribute ps_trim_meta stores metadata.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_trim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trim Propensity Scores — ps_trim","text":"returned object ps_trim vector length ps, trimmed entries replaced NA. attribute ps_trim_meta contains: method: trimming method used keep_idx: Indices retained trimmed_idx: Indices replaced NA Possibly fields final cutoffs, etc.","code":""},{"path":[]},{"path":"https://r-causal.github.io/propensity/reference/ps_trim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim Propensity Scores — ps_trim","text":"","code":"set.seed(2) n <- 300 x <- rnorm(n) z <- rbinom(n, 1, plogis(1.3 * x)) fit <- glm(z ~ x, family = binomial) ps <- predict(fit, type = \"response\")  ps_trim(ps, method = \"adaptive\") #> <ps_trim; trimmed 44 of [300]> #>         1         2         3         4         5         6         7         8  #> 0.1780112 0.4934483 0.8725819 0.1353577 0.4025855 0.4752489 0.6683913 0.3506150  #>         9        10        11        12        13        14        15        16  #>        NA 0.3831809 0.5738044 0.7467782 0.3038553 0.1508037 0.8997256        NA  #>        17        18        19        20        21        22        23        24  #> 0.7187207 0.4419184 0.7548592 0.5787647        NA 0.1244366 0.8728587        NA  #>        25        26        27        28        29        30        31        32  #> 0.4313639        NA 0.5939254 0.2474276 0.6938170 0.5298266 0.6778670 0.5399668  #>        33        34        35        36        37        38        39        40  #> 0.7707828 0.3366773 0.2037945 0.2476600        NA 0.1768609 0.2572600 0.3484614  #>        41        42        43        44        45        46        47        48  #> 0.3065403        NA 0.1895191        NA 0.6415565        NA 0.3300895 0.3990495  #>        49        50        51        52        53        54        55        56  #> 0.3683877 0.1246121 0.1902500        NA 0.2564150 0.8160957 0.1494022        NA  #>        57        58        59        60        61        62        63        64  #> 0.3247367 0.7345271 0.7859021 0.8849770        NA        NA 0.2208817 0.4841803  #>        65        66        67        68        69        70        71        72  #> 0.6036086 0.1941979        NA 0.2790100 0.4585602 0.1783019 0.1731103 0.5439312  #>        73        74        75        76        77        78        79        80  #> 0.3822372 0.5796397 0.4114856 0.1759469 0.8218240 0.6877562 0.7649259        NA  #>        81        82        83        84        85        86        87        88  #> 0.7505008        NA 0.2641422 0.1005949        NA        NA 0.2330120 0.3365148  #>        89        90        91        92        93        94        95        96  #> 0.3055473 0.5632496 0.8745082 0.8863194 0.1269292 0.1023453        NA 0.1166039  #>        97        98        99       100       101       102       103       104  #>        NA 0.4322875 0.1893249 0.2462384 0.7703638 0.5197606 0.3273939 0.2099624  #>       105       106       107       108       109       110       111       112  #> 0.1851823        NA 0.7356255        NA 0.2954896 0.3163021 0.1530042 0.3471981  #>       113       114       115       116       117       118       119       120  #> 0.5921212 0.8328274 0.6227067 0.5867797 0.8065734 0.7877456 0.4663064 0.2023006  #>       121       122       123       124       125       126       127       128  #> 0.8087856 0.4774812 0.8903829 0.2928150 0.1499937 0.6139848 0.2290136 0.6467536  #>       129       130       131       132       133       134       135       136  #>        NA        NA 0.6627758 0.5441083 0.7165979        NA 0.8025574 0.7998822  #>       137       138       139       140       141       142       143       144  #> 0.7597742 0.6921037        NA        NA 0.2509264 0.5711077 0.1970442 0.4590332  #>       145       146       147       148       149       150       151       152  #> 0.6800801 0.2329425 0.6525433 0.6180388 0.1970997 0.1584870 0.7452343 0.3731672  #>       153       154       155       156       157       158       159       160  #> 0.6727629 0.1889404 0.8164247 0.1043218 0.6858279 0.5895482 0.5223260 0.6558189  #>       161       162       163       164       165       166       167       168  #> 0.5672709 0.2368400 0.3418011 0.5540597 0.1083159 0.1806594        NA        NA  #>       169       170       171       172       173       174       175       176  #> 0.1187105 0.7490531 0.7738375 0.7077039 0.4491471 0.5416643 0.1764396 0.2333126  #>       177       178       179       180       181       182       183       184  #> 0.3434474 0.1704628 0.7023006        NA 0.1524604 0.1153463 0.5651259 0.1351849  #>       185       186       187       188       189       190       191       192  #> 0.6161453 0.7945146 0.4382952 0.6065642 0.2328341 0.6027459 0.1139088 0.4037497  #>       193       194       195       196       197       198       199       200  #> 0.1040353 0.3422376 0.7735701 0.6661116 0.2893391 0.2011360 0.1863223 0.2107038  #>       201       202       203       204       205       206       207       208  #> 0.5327159 0.1544197        NA 0.5052145 0.1642856 0.5622725 0.3887452 0.3163883  #>       209       210       211       212       213       214       215       216  #> 0.6341619 0.5095796 0.7582940 0.2665601        NA        NA 0.4774214 0.5852567  #>       217       218       219       220       221       222       223       224  #> 0.8030404 0.1067663 0.1338595 0.8855459 0.5671613 0.6707177 0.2000938        NA  #>       225       226       227       228       229       230       231       232  #> 0.4538222 0.5912550 0.3993802 0.7230688 0.3094663        NA 0.8702859        NA  #>       233       234       235       236       237       238       239       240  #> 0.2415827 0.4195113        NA 0.1483657 0.2541910 0.5957602 0.4626159 0.2496911  #>       241       242       243       244       245       246       247       248  #> 0.4020747        NA 0.7936546 0.6179515 0.6899355 0.2556513 0.4650462 0.5270157  #>       249       250       251       252       253       254       255       256  #> 0.2803714 0.2850014 0.6020472 0.3002118 0.3705819 0.3257820 0.7087374 0.5960756  #>       257       258       259       260       261       262       263       264  #> 0.3306472 0.3363861 0.7464321 0.3725508 0.8297224 0.3965473 0.3250342        NA  #>       265       266       267       268       269       270       271       272  #> 0.2345937        NA        NA 0.5886632 0.6106387 0.4172303        NA 0.4137080  #>       273       274       275       276       277       278       279       280  #> 0.4312953 0.1206438 0.5164038 0.8752400 0.4176263 0.7591012 0.3016993 0.4527210  #>       281       282       283       284       285       286       287       288  #>        NA 0.6501483 0.8168531 0.2393292 0.8311549 0.8851143 0.7936328 0.4317872  #>       289       290       291       292       293       294       295       296  #> 0.8222307 0.3983355 0.1356224 0.6302455 0.4602807 0.3527491 0.8562989 0.3153233  #>       297       298       299       300  #> 0.5741435        NA 0.1008201 0.2253829"},{"path":"https://r-causal.github.io/propensity/reference/ps_trim_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract ps_trim metadata — ps_trim_meta","title":"Extract ps_trim metadata — ps_trim_meta","text":"Returns internal metadata list ps_trim object.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_trim_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract ps_trim metadata — ps_trim_meta","text":"","code":"ps_trim_meta(x)"},{"path":"https://r-causal.github.io/propensity/reference/ps_trim_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract ps_trim metadata — ps_trim_meta","text":"x ps_trim object.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_trim_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract ps_trim metadata — ps_trim_meta","text":"named list metadata.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_trunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate (Winsorize) Propensity Scores — ps_trunc","title":"Truncate (Winsorize) Propensity Scores — ps_trunc","text":"ps_trunc() sets ‐‐range propensity scores fixed bounding values (form winsorizing). alternative ps_trim(), removes (sets NA) instead bounding refit ps_refit()","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_trunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate (Winsorize) Propensity Scores — ps_trunc","text":"","code":"ps_trunc(   ps,   method = c(\"ps\", \"pctl\", \"cr\"),   lower = NULL,   upper = NULL,   .exposure = NULL,   .treated = NULL,   .untreated = NULL )"},{"path":"https://r-causal.github.io/propensity/reference/ps_trunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate (Winsorize) Propensity Scores — ps_trunc","text":"ps propensity score, numeric vector 0 1. method One \"ps\", \"pctl\", \"cr\". \"ps\": directly cut [lower, upper] ps. \"pctl\": use quantiles ps bounding values \"cr\": common range ps given .exposure, bounding [min(ps[treated]), max(ps[untreated])] lower, upper Numeric quantile bounds. NULL, defaults vary method. .exposure method \"cr\", binary exposure vector. .treated value representing treatment group. provided, automatically detected. .untreated value representing control group. provided, automatically detected.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_trunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate (Winsorize) Propensity Scores — ps_trunc","text":"ps_trunc object (numeric vector). attribute ps_trunc_meta storing fields like method, lower_bound, upper_bound.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_trunc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncate (Winsorize) Propensity Scores — ps_trunc","text":"\\(ps[]\\): \\(ps[] < lower\\_bound\\), set \\(ps[] = lower\\_bound\\). \\(ps[] > upper\\_bound\\), set \\(ps[] = upper\\_bound\\). approach often called winsorizing.","code":""},{"path":[]},{"path":"https://r-causal.github.io/propensity/reference/ps_trunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncate (Winsorize) Propensity Scores — ps_trunc","text":"","code":"set.seed(2) n <- 30 x <- rnorm(n) z <- rbinom(n, 1, plogis(0.4 * x)) fit <- glm(z ~ x, family = binomial) ps <- predict(fit, type = \"response\")  # truncate just the 99th percentile ps_trunc(ps, method = \"pctl\", lower = 0, upper = .99) #> <ps_trunc{[0.341443426776033,0.805793268892769], method=pctl}[30]> #>         1         2         3         4         5         6         7         8  #> 0.5149714 0.6361298 0.7694837 0.4880712 0.6073989 0.6305169 0.6899234 0.5897388  #>         9        10        11        12        13        14        15        16  #> 0.8003122 0.6009455 0.6605909 0.7162599 0.5725720 0.4985231 0.7849940 0.3561684  #>        17        18        19        20        21        22        23        24  #> 0.7064972 0.6200818 0.7191624 0.6620999 0.8057933 0.4800637 0.7696302 0.7981060  #>        25        26        27        28        29        30  #> 0.6167236 0.3414434 0.6667225 0.5494305 0.6981704 0.6472363"},{"path":"https://r-causal.github.io/propensity/reference/ps_trunc_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract ps_trunc metadata — ps_trunc_meta","title":"Extract ps_trunc metadata — ps_trunc_meta","text":"Returns internal metadata list ps_trunc object.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_trunc_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract ps_trunc metadata — ps_trunc_meta","text":"","code":"ps_trunc_meta(x)"},{"path":"https://r-causal.github.io/propensity/reference/ps_trunc_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract ps_trunc metadata — ps_trunc_meta","text":"x ps_trunc object.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ps_trunc_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract ps_trunc metadata — ps_trunc_meta","text":"named list metadata.","code":""},{"path":"https://r-causal.github.io/propensity/reference/psw.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and Manipulate psw Objects — is_ps_calibrated","title":"Create and Manipulate psw Objects — is_ps_calibrated","text":"Functions create manipulate psw objects, specialized vectors propensity score weights optional estimand attributes. users use wt_ate() friends, functions can help extend functionality psw objects.","code":""},{"path":"https://r-causal.github.io/propensity/reference/psw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and Manipulate psw Objects — is_ps_calibrated","text":"","code":"is_ps_calibrated(wt)  new_psw(   x = double(),   estimand = NULL,   stabilized = FALSE,   trimmed = FALSE,   truncated = FALSE,   ... )  psw(   x = double(),   estimand = NULL,   stabilized = FALSE,   trimmed = FALSE,   truncated = FALSE,   calibrated = FALSE )  is_psw(x)  is_stabilized(wt)  is_causal_wt(x)  as_psw(x, estimand = NULL)  estimand(wt)  estimand(wt) <- value"},{"path":"https://r-causal.github.io/propensity/reference/psw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and Manipulate psw Objects — is_ps_calibrated","text":"wt object check convert. x numeric vector (default: double()). estimand character string representing estimand (e.g., \"ate\", \"att\", \"ato\"). Default NULL. stabilized logical TRUE trimmed Logical, whether weights came trimmed PS. truncated Logical, whether weights came truncated PS. ... Additional attributes track weights. calibrated Logical, whether weights came calibrated PS. value value add attribute.","code":""},{"path":"https://r-causal.github.io/propensity/reference/psw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and Manipulate psw Objects — is_ps_calibrated","text":"new_psw(): psw object. psw(): psw object. is_psw(): TRUE object psw, otherwise FALSE. as_psw(): psw object. estimand(): estimand attribute psw object. is_stabilized(): stabilized attribute psw object.","code":""},{"path":"https://r-causal.github.io/propensity/reference/psw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and Manipulate psw Objects — is_ps_calibrated","text":"","code":"psw_weights <- new_psw(c(0.1, 0.2, 0.3), estimand = \"ate\") is_psw(psw_weights) #> [1] TRUE estimand(psw_weights) #> [1] \"ate\"  psw_helper <- psw(c(0.5, 0.7), estimand = \"att\") as_psw(c(0.1, 0.2), estimand = \"ato\") #> <psw{estimand = ato}[2]> #> [1] 0.1 0.2"},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Propensity Score Weights for Causal Inference — wt_ate","title":"Calculate Propensity Score Weights for Causal Inference — wt_ate","text":"family functions computes propensity score weights various causal estimands: ATE (Average Treatment Effect) ATT (Average Treatment Effect Treated) ATU (Average Treatment Effect Untreated, sometimes called ATC, \"C\" stands \"control\") ATM (Average Treatment Effect Evenly Matchable) ATO (Average Treatment Effect Overlap population) propensity score can provided numeric vector predicted probabilities data.frame column represents predicted probability level exposure. can also propensity score objects created ps_trim(), ps_refit(), ps_trunc() returned weights encapsulated psw object, numeric vector additional attributes record estimand, whether weights stabilized, trimmed, truncated.","code":""},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Propensity Score Weights for Causal Inference — wt_ate","text":"","code":"wt_ate(   .propensity,   .exposure,   .sigma = NULL,   exposure_type = c(\"auto\", \"binary\", \"categorical\", \"continuous\"),   .treated = NULL,   .untreated = NULL,   stabilize = FALSE,   stabilization_score = NULL,   ... )  wt_att(   .propensity,   .exposure,   exposure_type = c(\"auto\", \"binary\", \"categorical\", \"continuous\"),   .treated = NULL,   .untreated = NULL,   ... )  wt_atu(   .propensity,   .exposure,   exposure_type = c(\"auto\", \"binary\", \"categorical\", \"continuous\"),   .treated = NULL,   .untreated = NULL,   ... )  wt_atm(   .propensity,   .exposure,   exposure_type = c(\"auto\", \"binary\", \"categorical\", \"continuous\"),   .treated = NULL,   .untreated = NULL,   ... )  wt_ato(   .propensity,   .exposure,   exposure_type = c(\"auto\", \"binary\", \"categorical\", \"continuous\"),   .treated = NULL,   .untreated = NULL,   ... )"},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Propensity Score Weights for Causal Inference — wt_ate","text":".propensity Either numeric vector predicted probabilities data.frame column corresponds level exposure. .exposure exposure variable. binary exposures, vector 0s 1s; continuous exposures, numeric vector. .sigma continuous exposures, numeric vector standard errors used dnorm(). example, can derived influence measures model (e.g., influence(model)$sigma). exposure_type Character string specifying type exposure. Options \"auto\", \"binary\", \"categorical\", \"continuous\". Defaults \"auto\", detects type automatically. .treated value representing treatment group. provided, automatically detected. .untreated value representing control group. provided, automatically detected. stabilize Logical indicating whether stabilize weights. ATE weights, stabilization multiplies weight either mean .exposure supplied stabilization_score. stabilization_score Optional numeric value stabilizing weights (e.g., predicted value regression model without predictors). used stabilize TRUE. ... Reserved future expansion. currently used.","code":""},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Propensity Score Weights for Causal Inference — wt_ate","text":"psw object (numeric vector) additional attributes: estimand: description estimand (e.g., \"ate\", \"att\"). stabilized: logical flag indicating stabilization applied. trimmed: logical flag indicating weights based trimmed propensity scores. truncated: logical flag indicating weights based truncated propensity scores.","code":""},{"path":[]},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":"exposure-types","dir":"Reference","previous_headings":"","what":"Exposure Types","title":"Calculate Propensity Score Weights for Causal Inference — wt_ate","text":"functions support different types exposures: binary: dichotomous treatments (e.g. 0/1). continuous: numeric exposures. , weights calculated via normal density using dnorm(). categorical: Currently supported (error raised). auto: Automatically detects exposure type based .exposure.","code":""},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":"stabilization","dir":"Reference","previous_headings":"","what":"Stabilization","title":"Calculate Propensity Score Weights for Causal Inference — wt_ate","text":"ATE weights, stabilization can improve performance estimator reducing variance. stabilize TRUE stabilization_score provided, weights multiplied mean .exposure. Alternatively, stabilization_score provided, used multiplier.","code":""},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":"trimmed-and-truncated-weights","dir":"Reference","previous_headings":"","what":"Trimmed and Truncated Weights","title":"Calculate Propensity Score Weights for Causal Inference — wt_ate","text":"addition standard weight functions, versions exist trimmed truncated propensity score weights created ps_trim(), ps_trunc(), ps_refit(). variants calculate weights using modified propensity scores (trimmed truncated) update estimand attribute accordingly. main functions (wt_ate, wt_att, wt_atu, wt_atm, wt_ato) dispatch class .propensity. binary exposures, weights computed using inverse probability formulas. continuous exposures (supported ATE), weights computed inverse density function evaluated observed exposure.","code":""},{"path":[]},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Propensity Score Weights for Causal Inference — wt_ate","text":"","code":"## ATE Weights with a Binary Exposure  # Simulate a binary treatment and corresponding propensity scores propensity_scores <- c(0.2, 0.7, 0.5, 0.8) treatment <- c(0, 1, 0, 1)  # Compute ATE weights (unstabilized) weights_ate <- wt_ate(propensity_scores, .exposure = treatment) #> ℹ Treating `.exposure` as binary weights_ate #> <psw{estimand = ate}[4]> #> [1] 1.250000 1.428571 2.000000 1.250000  # Compute ATE weights with stabilization using the mean of the exposure weights_ate_stab <- wt_ate(propensity_scores, .exposure = treatment, stabilize = TRUE) #> ℹ Treating `.exposure` as binary weights_ate_stab #> <psw{estimand = ate; stabilized}[4]> #> [1] 0.6250000 0.7142857 1.0000000 0.6250000  ## ATT Weights for a Binary Exposure  propensity_scores <- c(0.3, 0.6, 0.4, 0.7) treatment <- c(1, 1, 0, 0)  # Compute ATT weights weights_att <- wt_att(propensity_scores, .exposure = treatment) #> ℹ Treating `.exposure` as binary weights_att #> <psw{estimand = att}[4]> #> [1] 1.0000000 1.0000000 0.6666667 2.3333333"}]
