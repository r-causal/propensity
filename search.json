[{"path":"https://r-causal.github.io/propensity/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 propensity authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://r-causal.github.io/propensity/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Malcolm Barrett. Author, maintainer.","code":""},{"path":"https://r-causal.github.io/propensity/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barrett M (2025). propensity: Toolkit Calculating Working Propensity Scores. R package version 0.0.0.9000, https://r-causal.github.io/propensity/, https://github.com/malcolmbarrett/propensity.","code":"@Manual{,   title = {propensity: A Toolkit for Calculating and Working with Propensity Scores},   author = {Malcolm Barrett},   year = {2025},   note = {R package version 0.0.0.9000,     https://r-causal.github.io/propensity/},   url = {https://github.com/malcolmbarrett/propensity}, }"},{"path":"https://r-causal.github.io/propensity/index.html","id":"propensity-","dir":"","previous_headings":"","what":"A Toolkit for Calculating and Working with Propensity Scores","title":"A Toolkit for Calculating and Working with Propensity Scores","text":"goal propensity calculate propensity scores weights wide variety research questions. propensity early development.","code":""},{"path":"https://r-causal.github.io/propensity/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Toolkit for Calculating and Working with Propensity Scores","text":"can install development version propensity GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"r-causal/propensity\")"},{"path":"https://r-causal.github.io/propensity/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A Toolkit for Calculating and Working with Propensity Scores","text":"propensity early development. Currently, supports calculating propensity score weights binary exposures:","code":"library(propensity) propensity_scores <- c(.1, .3, .4, .3) x <- c(0, 0, 1, 0)  # ATE weights wt_ate(propensity_scores, .exposure = x) #> [1] 1.111111 1.428571 2.500000 1.428571  # Stabilized ATE weights wt_ate(propensity_scores, .exposure = x, stabilize = TRUE) #> [1] 0.2777778 0.3571429 0.6250000 0.3571429  # ATO weights wt_ato(propensity_scores, .exposure = x) #> [1] 0.1 0.3 0.6 0.3"},{"path":"https://r-causal.github.io/propensity/reference/ipw.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse Probability Weights for Causal Inference — ipw","title":"Inverse Probability Weights for Causal Inference — ipw","text":"ipw() bring---model (BYOM) inverse probability weighted estimator. ipw() accepts propensity score model weighted outcome model already fit. purpose ipw() capture uncertainty inherent two-step process calculate correct standard errors estimate. Currently, ipw() supports binary exposures either binary continuous outcomes. binary outcomes, ipw() calculates marginal risk difference, log risk ratio, log odds ratio. continuous outcomes, ipw() calculates marginal difference means.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ipw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse Probability Weights for Causal Inference — ipw","text":"","code":"ipw(   ps_mod,   outcome_mod,   .df = NULL,   estimand = NULL,   ps_link = NULL,   conf_level = 0.95 )  # S3 method for class 'ipw' as.data.frame(x, row.names = NULL, optional = NULL, exponentiate = FALSE, ...)"},{"path":"https://r-causal.github.io/propensity/reference/ipw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse Probability Weights for Causal Inference — ipw","text":"ps_mod fitted propensity score model class stats::glm(), typically logistic regression exposure dependent variable. outcome_mod fitted, weighted outcome model class stats::glm() stats::lm(), outcome dependent variable. .df data frame containing exposure, outcome, covariates. NULL, ipw() try extract data ps_mod outcome_mod. estimand character string specifying causal estimand: ate, att, ato, atm. NULL, function attempts infer existing weights outcome_mod, assuming calculated wt_ate(), wt_att(), wt_atm(), wt_ato(). ps_link character string specifying link function propensity score model: logit, probit, cloglog. Defaults whatever link used ps_mod. conf_level Numeric. Confidence level intervals (default 0.95). x ipw object row.names, optional, ... Passed .data.frame(). exponentiate Logical. log-RR log-exponentiated?","code":""},{"path":"https://r-causal.github.io/propensity/reference/ipw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse Probability Weights for Causal Inference — ipw","text":"S3 object class ipw containing: estimand: One \"ate\", \"att\", \"ato\", \"atm\". ps_mod: fitted propensity score model. outcome_mod: fitted outcome model. estimates: data frame point estimates, standard errors, z-statistics, confidence intervals, p-values.","code":""},{"path":"https://r-causal.github.io/propensity/reference/ipw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse Probability Weights for Causal Inference — ipw","text":"function constructs inverse probability weights based chosen estimand, uses weights (extracts outcome_mod) compute effect measures: rd: Risk difference log(rr): Log risk ratio log(): Log odds ratio linear outcome model (using stats::lm() stats::glm() family = gaussian()), difference means (diff) returned. Variance Estimation variance estimated via linearization, provide variance estimates IPW correctly account uncertainty estimation propensity scores. details various types propensity score weights corresponding variance estimators, see: Kostouraki , Hajage D, Rachet B, et al. variance estimation inverse probability--treatment weighting estimator: tutorial different types propensity score weights. Statistics Medicine. 2024; 43(13): 2672-2694. doi: 10.1002/sim.10078","code":""},{"path":[]},{"path":"https://r-causal.github.io/propensity/reference/ipw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse Probability Weights for Causal Inference — ipw","text":"","code":"set.seed(123) n <- 100 # confounder x1 <- rnorm(n) # exposure z  <- rbinom(n, 1, plogis(0.2 * x1)) # binary outcome y  <- rbinom(n, 1, plogis(1 + 2*z + 0.5*x1))  dat <- data.frame(x1, z, y)  # fit a propensity score model (exposure ~ x1) ps_mod <- glm(z ~ x1, data = dat, family = binomial())  # calculate weights for ATE ps <- predict(ps_mod, type = \"response\") wts <- wt_ate(ps, z) #> ℹ Treating `.exposure` as binary #> ℹ Setting treatment to `1`  # fit an outcome model (binary y ~ z) using IPW outcome_mod <- glm(y ~ z, data = dat, family = binomial(), weights = wts) #> Warning: non-integer #successes in a binomial glm!  # run IPW ipw_res <- ipw(ps_mod, outcome_mod)  ipw_res #> Inverse Probability Weight Estimator #> Estimand: ATE  #>  #> Propensity Score Model: #>   Call: glm(formula = z ~ x1, family = binomial(), data = dat)  #>  #> Outcome Model: #>   Call: glm(formula = y ~ z, family = binomial(), data = dat, weights = wts)  #>  #> Estimates: #>         estimate  std.err        z ci.lower ci.upper conf.level   p.value     #> rd       0.16311 0.076670 2.127466   0.0128  0.31338       0.95   0.03338 *   #> log(rr)  0.19720 0.080683 2.444134   0.0391  0.35533       0.95   0.01452 *   #> log(or)  1.24122 0.170217 7.291963   0.9076  1.57484       0.95 3.055e-13 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  # Convert to a data frame with exponentiated RR/OR ipw_res_df <- as.data.frame(ipw_res, exponentiate = TRUE) ipw_res_df #>   effect  estimate    std.err        z   ci.lower  ci.upper conf.level #> 1     rd 0.1631125 0.07666988 2.127466 0.01284233 0.3133827       0.95 #> 2     rr 1.2179865 0.08068260 2.444134 1.03983716 1.4266572       0.95 #> 3     or 3.4598274 0.17021737 7.291963 2.47836430 4.8299620       0.95 #>        p.value #> 1 3.338141e-02 #> 2 1.452002e-02 #> 3 3.055334e-13"},{"path":"https://r-causal.github.io/propensity/reference/psw.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and Manipulate psw Objects — psw","title":"Create and Manipulate psw Objects — psw","text":"Functions create manipulate psw objects, specialized vectors propensity score weights optional estimand attributes. users use wt_ate() friends, functions can help extend functionality psw objects.","code":""},{"path":"https://r-causal.github.io/propensity/reference/psw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and Manipulate psw Objects — psw","text":"","code":"new_psw(x = double(), estimand = NULL, stabilized = FALSE, ...)  psw(x = double(), estimand = NULL, stabilized = FALSE)  is_psw(x)  is_stabilized(wt)  is_causal_wt(x)  as_psw(x, estimand = NULL)  estimand(wt)  estimand(wt) <- value"},{"path":"https://r-causal.github.io/propensity/reference/psw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and Manipulate psw Objects — psw","text":"x numeric vector (default: double()). estimand character string representing estimand (e.g., \"ate\", \"att\", \"ato\"). Default NULL. stabilized logical TRUE ... Additional attributes track weights. wt object check convert. value value add attribute.","code":""},{"path":"https://r-causal.github.io/propensity/reference/psw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and Manipulate psw Objects — psw","text":"new_psw(): psw object. psw(): psw object. is_psw(): TRUE object psw, otherwise FALSE. as_psw(): psw object. estimand(): estimand attribute psw object. is_stabilized(): stabilized attribute psw object.","code":""},{"path":"https://r-causal.github.io/propensity/reference/psw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and Manipulate psw Objects — psw","text":"","code":"psw_weights <- new_psw(c(0.1, 0.2, 0.3), estimand = \"ate\") is_psw(psw_weights) #> [1] TRUE estimand(psw_weights) #> [1] \"ate\"  psw_helper <- psw(c(0.5, 0.7), estimand = \"att\") as_psw(c(0.1, 0.2), estimand = \"ato\") #> <psw{estimand = ato}[2]> #> [1] 0.1 0.2"},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate propensity score weights — wt_ate","title":"Calculate propensity score weights — wt_ate","text":"Calculate propensity score weights","code":""},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate propensity score weights — wt_ate","text":"","code":"wt_ate(.propensity, ...)  # S3 method for class 'numeric' wt_ate(   .propensity,   .exposure,   .sigma = NULL,   exposure_type = c(\"auto\", \"binary\", \"categorical\", \"continuous\"),   .treated = NULL,   .untreated = NULL,   stabilize = FALSE,   stabilization_score = NULL,   ... )  wt_att(.propensity, ...)  # S3 method for class 'numeric' wt_att(   .propensity,   .exposure,   exposure_type = c(\"auto\", \"binary\", \"categorical\", \"continuous\"),   .treated = NULL,   .untreated = NULL,   ... )  wt_atu(.propensity, ...)  # S3 method for class 'numeric' wt_atu(   .propensity,   .exposure,   exposure_type = c(\"auto\", \"binary\", \"categorical\", \"continuous\"),   .treated = NULL,   .untreated = NULL,   ... )  wt_atm(.propensity, ...)  # S3 method for class 'numeric' wt_atm(   .propensity,   .exposure,   exposure_type = c(\"auto\", \"binary\", \"categorical\", \"continuous\"),   .treated = NULL,   .untreated = NULL,   ... )  wt_ato(.propensity, ...)  # S3 method for class 'numeric' wt_ato(   .propensity,   .exposure,   exposure_type = c(\"auto\", \"binary\", \"categorical\", \"continuous\"),   .treated = NULL,   .untreated = NULL,   ... )"},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate propensity score weights — wt_ate","text":".propensity Either vector predicted value .exposure data.frame column predicted probability level .exposure. ... Passed functions currently used. .exposure exposure .propensity calculated. .sigma exposure_type continuous, vector observation-level standard errors passed dnorm(). lm model influence(model)$sigma. data frames produced broom's augment(), .sigma column. exposure_type type exposure. default, automatically detected based .exposure. .treated treatment level exposure. Automatically detected default. .untreated control level exposure. Automatically detected default. stabilize Logical. Stabilize weights? default, stabilizes mean .exposure. stabilization_score stabilize TRUE, optionally include score stabilize score, e.g. predicted values regression model predictors.","code":""},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate propensity score weights — wt_ate","text":"vector propensity score weights","code":""},{"path":"https://r-causal.github.io/propensity/reference/wt_ate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate propensity score weights — wt_ate","text":"","code":"propensity_scores <- c(.1, .3, .4, .3) x <- c(0, 0, 1, 0) wt_ate(propensity_scores, .exposure = x) #> ℹ Treating `.exposure` as binary #> <psw{estimand = ate}[4]> #> [1] 1.111111 1.428571 2.500000 1.428571"}]
